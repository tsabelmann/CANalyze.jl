var documenterSearchIndex = {"docs":
[{"location":"messages/","page":"Messages","title":"Messages","text":"CurrentModule = CANalyze","category":"page"},{"location":"messages/#CANalyze.Messages","page":"Messages","title":"CANalyze.Messages","text":"","category":"section"},{"location":"messages/","page":"Messages","title":"Messages","text":"Modules = [CANalyze.Messages]","category":"page"},{"location":"frames/","page":"Frames","title":"Frames","text":"CurrentModule = CANalyze","category":"page"},{"location":"frames/#CANalyze.Frames","page":"Frames","title":"CANalyze.Frames","text":"","category":"section"},{"location":"frames/","page":"Frames","title":"Frames","text":"Modules = [CANalyze.Frames]","category":"page"},{"location":"frames/#CANalyze.Frames.CANFdFrame","page":"Frames","title":"CANalyze.Frames.CANFdFrame","text":"\n\n\n\n","category":"type"},{"location":"frames/#CANalyze.Frames.CANFdFrame-Tuple{Integer, Vararg{Integer}}","page":"Frames","title":"CANalyze.Frames.CANFdFrame","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.CANFdFrame-Union{Tuple{A}, Tuple{Integer, A}} where A<:(AbstractArray{<:Integer})","page":"Frames","title":"CANalyze.Frames.CANFdFrame","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.CANFrame-Tuple{Integer, Vararg{Integer}}","page":"Frames","title":"CANalyze.Frames.CANFrame","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.CANFrame-Union{Tuple{A}, Tuple{Integer, A}} where A<:(AbstractArray{<:Integer})","page":"Frames","title":"CANalyze.Frames.CANFrame","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.data-Tuple{CANalyze.Frames.AbstractCANFrame}","page":"Frames","title":"CANalyze.Frames.data","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.dlc-Tuple{CANalyze.Frames.AbstractCANFrame}","page":"Frames","title":"CANalyze.Frames.dlc","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.frame_id-Tuple{CANalyze.Frames.AbstractCANFrame}","page":"Frames","title":"CANalyze.Frames.frame_id","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.is_extended-Tuple{CANalyze.Frames.AbstractCANFrame}","page":"Frames","title":"CANalyze.Frames.is_extended","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.is_standard-Tuple{CANalyze.Frames.AbstractCANFrame}","page":"Frames","title":"CANalyze.Frames.is_standard","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.max_size-Tuple{Type{CANalyze.Frames.AbstractCANFrame}}","page":"Frames","title":"CANalyze.Frames.max_size","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.max_size-Tuple{Type{CANalyze.Frames.CANFdFrame}}","page":"Frames","title":"CANalyze.Frames.max_size","text":"\n\n\n\n","category":"method"},{"location":"frames/#CANalyze.Frames.max_size-Tuple{Type{CANalyze.Frames.CANFrame}}","page":"Frames","title":"CANalyze.Frames.max_size","text":"\n\n\n\n","category":"method"},{"location":"decode/","page":"Decode","title":"Decode","text":"CurrentModule = CANalyze","category":"page"},{"location":"decode/#CANTools.Decode","page":"Decode","title":"CANTools.Decode","text":"","category":"section"},{"location":"decode/","page":"Decode","title":"Decode","text":"Modules = [CANalyze.Decode]","category":"page"},{"location":"decode/#CANalyze.Decode.decode-Tuple{CANalyze.Signals.Bit, CANalyze.Frames.CANFrame}","page":"Decode","title":"CANalyze.Decode.decode","text":"\n\n\n\n","category":"method"},{"location":"decode/#CANalyze.Decode.decode-Tuple{CANalyze.Signals.Raw, CANalyze.Frames.CANFrame}","page":"Decode","title":"CANalyze.Decode.decode","text":"\n\n\n\n","category":"method"},{"location":"decode/#CANalyze.Decode.decode-Union{Tuple{D}, Tuple{T}, Tuple{CANalyze.Signals.UnnamedSignal{T}, CANalyze.Frames.CANFrame, D}} where {T, D}","page":"Decode","title":"CANalyze.Decode.decode","text":"\n\n\n\n","category":"method"},{"location":"decode/#CANalyze.Decode.decode-Union{Tuple{T}, Tuple{CANalyze.Signals.FloatSignal{T}, CANalyze.Frames.CANFrame}} where T","page":"Decode","title":"CANalyze.Decode.decode","text":"\n\n\n\n","category":"method"},{"location":"decode/#CANalyze.Decode.decode-Union{Tuple{T}, Tuple{CANalyze.Signals.NamedSignal{T}, CANalyze.Frames.CANFrame}} where T","page":"Decode","title":"CANalyze.Decode.decode","text":"\n\n\n\n","category":"method"},{"location":"decode/#CANalyze.Decode.decode-Union{Tuple{T}, Tuple{CANalyze.Signals.Unsigned{T}, CANalyze.Frames.CANFrame}} where T","page":"Decode","title":"CANalyze.Decode.decode","text":"\n\n\n\n","category":"method"},{"location":"encode/","page":"Encode","title":"Encode","text":"CurrentModule = CANalyze","category":"page"},{"location":"encode/#CANalyze.Encode","page":"Encode","title":"CANalyze.Encode","text":"","category":"section"},{"location":"encode/","page":"Encode","title":"Encode","text":"Modules = [CANalyze.Encode]","category":"page"},{"location":"encode/#CANalyze.Encode","page":"Encode","title":"CANalyze.Encode","text":"\n\n\n\n","category":"module"},{"location":"signals/","page":"Signals","title":"Signals","text":"CurrentModule = CANalyze","category":"page"},{"location":"signals/#CANalyze.Signals","page":"Signals","title":"CANalyze.Signals","text":"","category":"section"},{"location":"signals/","page":"Signals","title":"Signals","text":"Modules = [CANalyze.Signals]","category":"page"},{"location":"signals/#CANalyze.Signals.AbstractFloatSignal","page":"Signals","title":"CANalyze.Signals.AbstractFloatSignal","text":"\n\n\n\n","category":"type"},{"location":"signals/#CANalyze.Signals.AbstractIntegerSignal","page":"Signals","title":"CANalyze.Signals.AbstractIntegerSignal","text":"\n\n\n\n","category":"type"},{"location":"signals/#CANalyze.Signals.AbstractSignal","page":"Signals","title":"CANalyze.Signals.AbstractSignal","text":"\n\n\n\n","category":"type"},{"location":"signals/#CANalyze.Signals.Bit","page":"Signals","title":"CANalyze.Signals.Bit","text":"\n\n\n\n","category":"type"},{"location":"signals/#CANalyze.Signals.Bit-Tuple{Integer}","page":"Signals","title":"CANalyze.Signals.Bit","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Bit-Tuple{}","page":"Signals","title":"CANalyze.Signals.Bit","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Bits","page":"Signals","title":"CANalyze.Signals.Bits","text":"\n\n\n\n","category":"type"},{"location":"signals/#CANalyze.Signals.Bits-Tuple{Vararg{Integer}}","page":"Signals","title":"CANalyze.Signals.Bits","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Bits-Union{Tuple{CANalyze.Signals.AbstractFloatSignal{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.Bits","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Bits-Union{Tuple{CANalyze.Signals.AbstractIntegerSignal{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.Bits","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.FloatSignal","page":"Signals","title":"CANalyze.Signals.FloatSignal","text":"\n\n\n\n","category":"type"},{"location":"signals/#CANalyze.Signals.FloatSignal-Tuple{Integer, Union{AbstractFloat, Integer}, Union{AbstractFloat, Integer}, Symbol}","page":"Signals","title":"CANalyze.Signals.FloatSignal","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.FloatSignal-Tuple{}","page":"Signals","title":"CANalyze.Signals.FloatSignal","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.FloatSignal-Union{Tuple{Integer}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.FloatSignal","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.NamedSignal","page":"Signals","title":"CANalyze.Signals.NamedSignal","text":"\n\n\n\n","category":"type"},{"location":"signals/#CANalyze.Signals.Raw","page":"Signals","title":"CANalyze.Signals.Raw","text":"\n\n\n\n","category":"type"},{"location":"signals/#CANalyze.Signals.Raw-Tuple{Integer, Integer, Symbol}","page":"Signals","title":"CANalyze.Signals.Raw","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Raw-Union{Tuple{}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.Raw","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Signed-Tuple{Integer, Integer, Union{AbstractFloat, Integer}, Union{AbstractFloat, Integer}, Symbol}","page":"Signals","title":"CANalyze.Signals.Signed","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Signed-Tuple{}","page":"Signals","title":"CANalyze.Signals.Signed","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Signed-Union{Tuple{T}, Tuple{Integer, Integer}} where T","page":"Signals","title":"CANalyze.Signals.Signed","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Signed-Union{Tuple{}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.Signed","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.UnnamedSignal","page":"Signals","title":"CANalyze.Signals.UnnamedSignal","text":"\n\n\n\n","category":"type"},{"location":"signals/#CANalyze.Signals.Unsigned","page":"Signals","title":"CANalyze.Signals.Unsigned","text":"\n\n\n\n","category":"type"},{"location":"signals/#CANalyze.Signals.Unsigned-Tuple{Integer, Integer, Union{AbstractFloat, Integer}, Union{AbstractFloat, Integer}, Symbol}","page":"Signals","title":"CANalyze.Signals.Unsigned","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Unsigned-Tuple{}","page":"Signals","title":"CANalyze.Signals.Unsigned","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Unsigned-Union{Tuple{T}, Tuple{Integer, Integer}} where T","page":"Signals","title":"CANalyze.Signals.Unsigned","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.Unsigned-Union{Tuple{}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.Unsigned","text":"\n\n\n\n","category":"method"},{"location":"signals/#Base.:==-Tuple{CANalyze.Signals.Bit, CANalyze.Signals.Bit}","page":"Signals","title":"Base.:==","text":"\n\n\n\n","category":"method"},{"location":"signals/#Base.:==-Union{Tuple{F}, Tuple{T}, Tuple{F, F}} where {T, F<:CANalyze.Signals.AbstractFloatSignal{T}}","page":"Signals","title":"Base.:==","text":"\n\n\n\n","category":"method"},{"location":"signals/#Base.length-Tuple{CANalyze.Signals.Bit}","page":"Signals","title":"Base.length","text":"\n\n\n\n","category":"method"},{"location":"signals/#Base.length-Tuple{CANalyze.Signals.Raw}","page":"Signals","title":"Base.length","text":"\n\n\n\n","category":"method"},{"location":"signals/#Base.length-Union{Tuple{CANalyze.Signals.Signed{T}}, Tuple{T}} where T","page":"Signals","title":"Base.length","text":"\n\n\n\n","category":"method"},{"location":"signals/#Base.length-Union{Tuple{CANalyze.Signals.Unsigned{T}}, Tuple{T}} where T","page":"Signals","title":"Base.length","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.byte_order-Tuple{CANalyze.Signals.Bit}","page":"Signals","title":"CANalyze.Signals.byte_order","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.byte_order-Tuple{CANalyze.Signals.Raw}","page":"Signals","title":"CANalyze.Signals.byte_order","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.byte_order-Union{Tuple{CANalyze.Signals.FloatSignal{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.byte_order","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.byte_order-Union{Tuple{CANalyze.Signals.Signed{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.byte_order","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.byte_order-Union{Tuple{CANalyze.Signals.Unsigned{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.byte_order","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.check-Union{Tuple{T}, Tuple{CANalyze.Signals.AbstractIntegerSignal{T}, UInt8}} where T","page":"Signals","title":"CANalyze.Signals.check","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.check-Union{Tuple{T}, Tuple{CANalyze.Signals.NamedSignal{T}, UInt8}} where T","page":"Signals","title":"CANalyze.Signals.check","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.default-Union{Tuple{CANalyze.Signals.NamedSignal{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.default","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.factor-Union{Tuple{CANalyze.Signals.FloatSignal{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.factor","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.factor-Union{Tuple{CANalyze.Signals.Signed{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.factor","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.factor-Union{Tuple{CANalyze.Signals.Unsigned{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.factor","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.name-Union{Tuple{CANalyze.Signals.NamedSignal{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.name","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.offset-Union{Tuple{CANalyze.Signals.FloatSignal{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.offset","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.offset-Union{Tuple{CANalyze.Signals.Signed{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.offset","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.offset-Union{Tuple{CANalyze.Signals.Unsigned{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.offset","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.overlap-Union{Tuple{S}, Tuple{R}, Tuple{CANalyze.Signals.AbstractSignal{R}, CANalyze.Signals.AbstractSignal{S}}} where {R, S}","page":"Signals","title":"CANalyze.Signals.overlap","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.share_bits-Tuple{CANalyze.Signals.Bits, CANalyze.Signals.Bits}","page":"Signals","title":"CANalyze.Signals.share_bits","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.signal-Union{Tuple{CANalyze.Signals.NamedSignal{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.signal","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.start-Tuple{CANalyze.Signals.Bit}","page":"Signals","title":"CANalyze.Signals.start","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.start-Tuple{CANalyze.Signals.Raw}","page":"Signals","title":"CANalyze.Signals.start","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.start-Union{Tuple{CANalyze.Signals.FloatSignal{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.start","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.start-Union{Tuple{CANalyze.Signals.Signed{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.start","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.start-Union{Tuple{CANalyze.Signals.Unsigned{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.start","text":"\n\n\n\n","category":"method"},{"location":"signals/#CANalyze.Signals.unit-Union{Tuple{CANalyze.Signals.NamedSignal{T}}, Tuple{T}} where T","page":"Signals","title":"CANalyze.Signals.unit","text":"\n\n\n\n","category":"method"},{"location":"#CANalyze.jl","page":"Home","title":"CANalyze.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build status) (Image: codecov) (Image: Documentation) (Image: Code Style: Blue)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Julia package for analyzing CAN-bus data using messages and variables","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Start julia and open the package mode by entering ]. Then enter","category":"page"},{"location":"","page":"Home","title":"Home","text":"add CANalyze","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will install the packages CANalyze.jl and all its dependencies.","category":"page"},{"location":"#License-/-Terms-of-Usage","page":"Home","title":"License / Terms of Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The source code of this project is licensed under the MIT license. This implies that you are free to use, share, and adapt it. However, please give appropriate credit by citing the project.","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have problems using the software, find mistakes, or have general questions please use the issue tracker to contact us.","category":"page"},{"location":"#Contributors","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tim Lucas Sabelmann","category":"page"},{"location":"utils/","page":"Utils","title":"Utils","text":"CurrentModule = CANalyze","category":"page"},{"location":"utils/#CANalyze.Utils","page":"Utils","title":"CANalyze.Utils","text":"","category":"section"},{"location":"utils/","page":"Utils","title":"Utils","text":"Modules = [CANalyze.Utils]","category":"page"},{"location":"utils/#CANalyze.Utils.from_bytes-Union{Tuple{T}, Tuple{Type{T}, AbstractArray{UInt8}}} where T<:Number","page":"Utils","title":"CANalyze.Utils.from_bytes","text":"from_bytes(type::Type{T}, array::AbstractArray{UInt8}) where {T <: Number} -> T\n\nCreates a value of type T constituted by the byte-array array. If the array length is smaller than the size of T, array is filled with enough zeros.\n\nArguments\n\ntype::Type{T}: the type to which the byte-array is transformed\narray::AbstractArray{UInt8}: the byte array\n\nReturns\n\nT: the value constructed from the byte sequence\n\nExamples\n\nusing CANalyze.Utils\nbytes = Utils.from_bytes(UInt16, UInt8[0xFF, 0xAA])\n\n# output\n0xaaff\n\n\n\n\n\n","category":"method"},{"location":"utils/#CANalyze.Utils.full_mask-Union{Tuple{Type{T}}, Tuple{T}} where T<:Integer","page":"Utils","title":"CANalyze.Utils.full_mask","text":"full_mask(::Type{T}) where {T <: Integer} -> T\n\nCreates a full mask of type T with 8sizeof(T) bits.\n\nArguments\n\nType{T}: the type of the mask\n\nReturns\n\nT: the full mask\n\nExamples\n\nusing CANalyze.Utils\nm = Utils.full_mask(Int8)\n\n# output\n-1\n\n\n\n\n\n","category":"method"},{"location":"utils/#CANalyze.Utils.is_big_endian-Tuple{}","page":"Utils","title":"CANalyze.Utils.is_big_endian","text":"is_big_endian() -> Bool\n\nReturns whether the system has big-endian byte-order\n\nReturns\n\nBool: The system has big-endian byte-order\n\n\n\n\n\n","category":"method"},{"location":"utils/#CANalyze.Utils.is_little_endian-Tuple{}","page":"Utils","title":"CANalyze.Utils.is_little_endian","text":"is_little_endian() -> Bool\n\nReturns whether the system has little-endian byte-order\n\nReturns\n\nBool: The system has little-endian byte-order\n\n\n\n\n\n","category":"method"},{"location":"utils/#CANalyze.Utils.mask-Union{Tuple{Type{T}}, Tuple{T}} where T<:Integer","page":"Utils","title":"CANalyze.Utils.mask","text":"mask(::Type{T}) where {T <: Integer} -> T\n\nCreates a full mask of type T with 8sizeof(T) bits.\n\nArguments\n\nType{T}: the type of the mask\n\nReturns\n\nT: the full mask\n\nExamples\n\nusing CANalyze.Utils\nm = Utils.mask(UInt64)\n\n# output\n0xffffffffffffffff\n\n\n\n\n\n","category":"method"},{"location":"utils/#CANalyze.Utils.mask-Union{Tuple{T}, Tuple{Type{T}, Integer, Integer}} where T<:Integer","page":"Utils","title":"CANalyze.Utils.mask","text":"mask(::Type{T}, length::Integer, shift::Integer) where {T <: Integer} -> T\n\nCreates a mask of type T with length number of bits and right-shifted by shift number of bits.\n\nArguments\n\nType{T}: the type of the mask\nlength::Integer: the number of bits\nshift::Integer: the right-shift\n\nReturns\n\nT: the mask defined by length and shift\n\nExamples\n\nusing CANalyze.Utils\nm = Utils.mask(UInt64, 32, 16)\n\n# output\n0x0000ffffffff0000\n\n\n\n\n\n","category":"method"},{"location":"utils/#CANalyze.Utils.mask-Union{Tuple{T}, Tuple{Type{T}, Integer}} where T<:Integer","page":"Utils","title":"CANalyze.Utils.mask","text":"mask(::Type{T}, length::Integer) where {T <: Integer} -> T\n\nCreates a mask of type T with length number of bits.\n\nArguments\n\nType{T}: the type of the mask\nlength::Integer: the number of bits\n\nReturns\n\nT: the mask defined by length\n\nExamples\n\nusing CANalyze.Utils\nm = Utils.mask(UInt64, 32)\n\n# output\n0x00000000ffffffff\n\n\n\n\n\n","category":"method"},{"location":"utils/#CANalyze.Utils.mask-Union{Tuple{T}, Tuple{Type{T}, UInt8, UInt8}} where T<:Integer","page":"Utils","title":"CANalyze.Utils.mask","text":"mask(::Type{T}, length::UInt8, shift::UInt8) where {T <: Integer} -> T\n\nCreates a mask of type T with length number of bits and right-shifted by shift number of bits.\n\nArguments\n\nType{T}: the type of the mask\nlength::UInt8: the number of bits\nshift::UInt8: the right-shift\n\nReturns\n\nT: the mask defined by length and shift\n\n\n\n\n\n","category":"method"},{"location":"utils/#CANalyze.Utils.mask-Union{Tuple{T}, Tuple{Type{T}, UInt8}} where T<:Integer","page":"Utils","title":"CANalyze.Utils.mask","text":"mask(::Type{T}, length::UInt8) where {T <: Integer} -> T\n\nCreates a mask of type T with length number of bits.\n\nArguments\n\nType{T}: the type of the mask\nlength::UInt8: the number of bits\n\nReturns\n\nT: the mask defined by length\n\n\n\n\n\n","category":"method"},{"location":"utils/#CANalyze.Utils.to_bytes-Tuple{Number}","page":"Utils","title":"CANalyze.Utils.to_bytes","text":"to_bytes(num::Number) -> Vector{UInt8}\n\nCreates the byte representation of the number num.\n\nArguments\n\nnum::Number: the type of the mask\n\nReturns\n\nVector{UInt8}: the bytes representation of the number num\n\nExamples\n\nusing CANalyze.Utils\nbytes = Utils.to_bytes(UInt16(0xAAFF))\n\n# output\n2-element Vector{UInt8}:\n 0xff\n 0xaa\n\n\n\n\n\n","category":"method"},{"location":"utils/#CANalyze.Utils.zero_mask-Union{Tuple{Type{T}}, Tuple{T}} where T<:Integer","page":"Utils","title":"CANalyze.Utils.zero_mask","text":"zero_mask(::Type{T}) where {T <: Integer} -> T\n\nCreates a zero mask of type T where every bit is unset.\n\nArguments\n\nType{T}: the type of the mask\n\nReturns\n\nT: the zero mask\n\nExamples\n\nusing CANalyze.Utils\nm = Utils.zero_mask(UInt8)\n\n# output\n0x00\n\n\n\n\n\n","category":"method"}]
}
